https://github.com/fsoftwareengineer/todo-application, https://imasoftwareengineer.tistory.com/m/
https://itc-engineering-blog.netlify.app/blogs/fastapi-azure-app
1.1 ToDo 웹 애플리케이션 기능
1.1.2 ToDo 웹 애플리케이션 아키텍쳐
1.1.3 기술과 구현 사이
1.1.4 정리

1.2 배경지식
1.2.1 하이퍼텍스트 트랜스퍼 프로토콜 - 직렬화 역직렬화 JSON 자료형
1.2.2 자바스크립트 오브젝트 노테이션
1.2.3 서버란?
1.2.4 정적 웹 서버 - HTTP 서버 중에서도 리소스 파일을 리턴하는 서버
1.2.5 동적 웹 서버 - 요청을 처리한 후 처리한 결과에 따라 응답 바디를 재구성하거나 HTML 템플릿 파일에 결과를 대체
1.2.6 자바 서블릿 컨테이너/엔진

2.1 백엔드 개발 환경 설정
2.1.1 자바 8 설치
2.1.2 이클립스 설치
2.1.3 스프링 프레임워크와 의존성 주입(Dependency Injection)
2.1.4 스프링 프레임워크와 디스패처 서블릿
2.1.5 스프링 부트 프로젝트 설정
2.1.6 메인 메서드와 @SpringBootApplication
2.1.7 빌드 자동화 툴 : Gradle과 라이브러리
2.1.8 디펜던시 라이브러리 추가
2.1.9 롬복
2.1.10 포스트맨 API 테스트
2.1.11 정리

2.2 백엔드 서비스 아키텍쳐
2.2.1 레이어드 아키텍처 - 애플리케이션을 구성하는 요소들을 수평으로 나눠 관리
2.2.2 모델, 엔티티, DTO(Data Transfer Object) - 기능 수행 클래스, 데이터 담는 클래스
2.2.3 REST API - 리소스(리턴할 수 있는 모든 것 HTML, JSON, 이미지 등)
2.2.4 컨트롤러 레이어 : 스프링 REST API 컨트롤러
2.2.5 서비스 레이어 : 비즈니스 로직 - 컨트롤러와 퍼시스턴스 사이에서 비즈니스 로직을 수행하는 역할, @Autowired(빈을 자동으로 인스턴스 멤버 변수에 연결)
2.2.6 퍼시스턴스 레이어 : 스프링 데이터 JPA
2.2.7 정리
