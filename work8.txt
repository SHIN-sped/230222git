https://github.com/fsoftwareengineer/todo-application, https://imasoftwareengineer.tistory.com/m/
https://itc-engineering-blog.netlify.app/blogs/fastapi-azure-app
1.1 ToDo 웹 애플리케이션 기능
1.1.2 ToDo 웹 애플리케이션 아키텍쳐
1.1.3 기술과 구현 사이
1.1.4 정리

1.2 배경지식
1.2.1 하이퍼텍스트 트랜스퍼 프로토콜 - 직렬화 역직렬화 JSON 자료형
1.2.2 자바스크립트 오브젝트 노테이션
1.2.3 서버란?
1.2.4 정적 웹 서버 - HTTP 서버 중에서도 리소스 파일을 리턴하는 서버
1.2.5 동적 웹 서버 - 요청을 처리한 후 처리한 결과에 따라 응답 바디를 재구성하거나 HTML 템플릿 파일에 결과를 대체
1.2.6 자바 서블릿 컨테이너/엔진

2.1 백엔드 개발 환경 설정
2.1.1 자바 8 설치
2.1.2 이클립스 설치
2.1.3 스프링 프레임워크와 의존성 주입(Dependency Injection)
2.1.4 스프링 프레임워크와 디스패처 서블릿
2.1.5 스프링 부트 프로젝트 설정
2.1.6 메인 메서드와 @SpringBootApplication
2.1.7 빌드 자동화 툴 : Gradle과 라이브러리
2.1.8 디펜던시 라이브러리 추가
2.1.9 롬복
2.1.10 포스트맨 API 테스트
2.1.11 정리

2.2 백엔드 서비스 아키텍쳐
2.2.1 레이어드 아키텍처 - 애플리케이션을 구성하는 요소들을 수평으로 나눠 관리
2.2.2 모델, 엔티티, DTO(Data Transfer Object) - 기능 수행 클래스, 데이터 담는 클래스
2.2.3 REST API - 리소스(리턴할 수 있는 모든 것 HTML, JSON, 이미지 등)
2.2.4 컨트롤러 레이어 : 스프링 REST API 컨트롤러
2.2.5 서비스 레이어 : 비즈니스 로직 - 컨트롤러와 퍼시스턴스 사이에서 비즈니스 로직을 수행하는 역할, @Autowired(빈을 자동으로 인스턴스 멤버 변수에 연결)
2.2.6 퍼시스턴스 레이어 : 스프링 데이터 JPA
2.2.7 정리

2.3 서비스 개발 및 실습
2.3.1 Create Todo 구현
2.3.2 Retrive Todo 구현
2.3.3 Update Todo 구현
2.3.4 Delete Todo 구현
2.3.5 정리

3.1 프론트엔드 개발 환경 설정
3.1.1 Node.js와 NPM 설치
3.1.2 비주얼 스튜디오 코드 설치
3.1.3 프론트엔드 애플리케이션 생성
3.1.4 material-ui 패키지 설치
3.1.5 브라우저의 동작 원리
3.1.6 React.js
3.1.7 정리

3.2 프론트엔드 서비스 개발
3.2.1 Todo 리스트
3.2.2 Todo 추가
3.2.3 Todo 삭제
3.2.4 Todo 수정
3.2.5 정리

3.3 서비스 통합 - CORS, @Configuration, fetch
3.3.1 componentDidMount
3.3.2 CORS(Cross-Origin Resource Sharing)
3.3.3 fetch
3.3.4 정리

4.1 REST API 인증 기법
4.1.1 Basic 인증 - HTTP 요청
4.1.2 토큰 기반 인증
4.1.3 JSON 웹 토큰
4.1.4 정리

4.2 User 레이어 구현
4.2.1 UserEntity.java
4.2.2 UserRepository.java
4.2.3 UserService.java
4.2.4 UserController.java
4.2.5 정리


4.3 스프링 시큐리티 통합
4.3.1 JWT 생성 및 반환 구현
4.3.2 스프링 시큐리티와 서블릿 필터
4.3.3 JWT를 이용한 인증 구현
4.3.4 스프링 시큐리티 설정
4.3.5 TodoController에서 인증된 사용자 사용하기
4.3.6 패스워드 암호화
4.3.7 정리

5.1 라우팅
5.1.1 react-router-dom
5.1.2 react-router-dom 라이브러리가 필요한 이유 - client-side routing
5.1.3 로그인 컴포넌트
5.1.4 접근 거부 시 로그인 페이지로 라우팅 하기
5.1.5 정리

5.2 로그인 페이지
5.2.1 로그인을 위한 API 서비스 메서드 작성
5.2.2 로그인에 성공
5.2.3 정리

5.3 로컬 스토리지를 이용한 액세스 토큰 관리
5.3.1 로컬 스토리지
5.3.2 액세스 토큰 저장
5.3.3 정리

5.4 로그아웃과 글리치 해결
5.4.1 로그아웃 서비스
5.4.2 내비게이션 바와 로그아웃
5.4.3 UI 글리치 해결
5.4.4 정리

5.5 계정 생성 페이지
5.5.1 계정 생성 로직
5.5.2 정리

6.1 서비스 아키텍쳐
6.1.1 EC2
6.1.2 라우트 53 - DNS
6.1.3 애플리케이션 로드 밸런서
6.1.4 오토 스케일링 그룹
6.1.5 VPC와 서브넷
6.1.6 일라스틱 빈스톡
6.1.7 정리

6.2 AWS CLI와 EB CLI 설치
6.2.1 AWS 계정 생성
6.2.2 파이썬 설치
6.2.3 AWS CLI 설치
6.2.4 AWS CLI 설정
6.2.5 pip를 이용해 EB CLI 설치
6.2.6 윈도우 사용자를 위한 환경 변수 설정
6.2.7 정리

6.3 AWS의 일라스틱 빈스톡을 이용한 백엔드 배포
6.3.1 일라스틱 빈스톡
6.3.2 eb init을 이용해 애플리케이션 생성
6.3.3 백엔드 애플리케이션 설정
6.3.4 eb create를 이용해 AWS에 환경 생성
6.3.5 애플리케이션 배포
6.3.6 환경 구성
6.3.7 엔드포인트 테스팅
6.3.8 프론트엔드 통합 테스팅
6.3.9 정리

6.4 AWS의 일라스틱 빈스톡을 이용한 프론트엔드 배포
6.4.1 eb init을 이용해 애플리케이션 생성
6.4.2 eb create를 이용한 애플리케이션 배포
6.4.3 크로스-오리진 문제
6.4.4 정리

6.5 Route 53 도메인 설정
6.5.1 도메인 구매
6.5.2 호스팅 영역 생성
6.5.3 백엔드 재배포
6.5.4 프론트엔드 재배포
6.5.5 정리

6.6 백엔드/프론트엔드 AWS Certificate Manager를 이용한 http 설정
6.6.1 인증서 요청
6.6.2 백엔드 애플리케이션 HTTPS 설정
6.6.3 프론트엔드 애플리케이션 HTTPS 설정
6.6.4 정리



