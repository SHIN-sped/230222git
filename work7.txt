스프링 부트를 활용한 데이터 액세스
1.1 리액티브 데이터 스토어 요건

1.2 이커머스 애플리케이션 도메인 정의
1.2.1 pom.xml에 몽고디비 의존관계 추가
1.2.2 판매 상품 데이터
1.2.3 아이템과 수량을 포함하는 구매 상품 데이터
1.2.4 장바구니 데이터

1.3 리포지토리 만들기
1.3.1 판매 상품(item)용 리액티브 데이터 리포지토리

1.4 테스트 데이터 로딩
1.4.1 판매 상품 한 개를 저장하는 잘못 작성된 코드
1.4.2 리액티브 리포지토리의 올바른 사용
1.4.3 블로킹 리포지토리 정의
1.4.4 블로킹 API를 사용해서 데이터를 로딩하는 컴포넌트
1.4.5 MongoOperations 기반 데이터베이스 로더

1.5 장바구니 보여주기
1.5.1 생성자를 통해 리포지토리를 주입받는 HomeController
1.5.2 루트 URL에서 장바구니를 보여주도록 개선
1.5.3 판매 상품 전체 목록을 보여주는 <table>
1.5.4 hidden으로 지정된 웹 메소드(DELETE, PUT, PATCH) 처리 활성화
1.5.5 현재 장바구니를 보여주는 <table> 요소

1.6 장바구니에 상품 담기
1.6.1 전통적인 반복문을 활용한 장바구니 탐색
1.6.2 스트림 API를 활용한 장바구니 탐색

1.7 서비스 추출
1.7.1 @Service 빈으로 추출한 장바구니에 상품 담기
1.7.2 상품 담기 기능을 CartService에게 위임해서 간결해진 addToCart() 메소드

1.8 데이터베이스 쿼리
1.8.1 검색어로 상품 목록을 조회하는 리포지토리
1.8.2 description 등 몇 가지 필드가 더 있는 Item 객체 - 쿼리 메소드 이름 규칙 각 DB프로그램

1.9 쿼리문 자동 생성 메소드로 충분하지 않을 때
1.9.1 

1.10 Example 쿼리
1.10.1 요구 사항을 반영하면서 복잡해진 리포지토리
1.10.2 이름, 설명, AND 사용 여부를 모두 적용한 필터링 구현
1.10.3 ReactiveQueryByExampleExecutor<T>를 사용하는 ItemByExampleRepository
1.10.4 스프링 데이터 커먼즈에 포함된 ReactiveQueryByExampleExacturor 인터페이스
1.10.5 복잡한 검색 요구 조건을 Example 쿼리로 구현한 코드
1.10.6 Example 쿼리로 구현된 서비스를 사용하는 웹 컨트롤러

1.11 평문형 연산
1.11.1 평문형 API를 사용한 Item 검색
1.11.2 평문형 API를 사용한 Example 쿼리 검색 구현 코드

1.12 트레이드 오프
1.13 정리

